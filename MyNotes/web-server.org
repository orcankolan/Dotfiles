#TITLE = Web server project
* SSH settings and Web server, 'ngynx'
** set sshd_config:
   in the /etc/ssh/shhd_config file:
   do not set anything (port should be: 22)
** to ssh to server with ip:
   
   #+BEGIN_SRC sh
     ssh -i ~/Downloads/Light... admin@staticip
     or ssh -i ~/Downloads/Light... admin@odtu-tm.com
   #+END_SRC
** Add your ssh public key to remote servers authorized keys
   - > cat ~/.ssh/id_rsa.pub 
   - copy the result
   - and paste it in to the server's ~/.ssh/authorized_keys
   - This way you you are not supposed to: ssh -i ~/Downloads/Light... admin@odtu-tm.org , with the pem file from lightsail site
** install nginx
  nginx - is the server application
  #+BEGIN_SRC sh 
    install ngynx 
  #+END_SRC
** to restart nginx: 
   #+BEGIN_SRC sh
     systemctl reload nginx
   #+END_SRC
** to restart ssh service: 
   #+BEGIN_SRC sh
     systemctl restart ssh.service
   #+END_SRC
** firewall (ufw) - seems not enough alone
   #+BEGIN_SRC sh
     sudo apt install ufw
     sudo ufw enable
     sudo ufw app list
     sudo ufw allow 22/tcp comment 'Open port ssh tcp port 22'
     sudo ufw allow 80
     sudo ufw allow 443
     sudo ufw allow 'Nginx Full'
     sudo ufw status
   #+END_SRC
** also firewall on aws lightsail:
   - in "Networking"->"Firewall"->"Add Rule"-> HTTPS 443
** set nginx.conf in /var/nginx (for timeout erros)
   #+BEGIN_SRC sh
     sudo vim /etc/nginx/nginx.conf 
   #+END_SRC
   then:
   http {
    ...
    fastcgi_read_timeout 600s;
    ...
    } 
** for multiple sites on local host:
   - goto /etc/hosts:
    add a "127.0.0.1 foo.demo.somename" 
   - then add this name as server name in the nginx server conf in sites-available folder
     i.e /etc/nginx/sites-available/somefile
* Database, 'mysql'
** install mysql-server:
   #+BEGIN_SRC sh
     sudo apt install mysql-server
   #+END_SRC
** to configure mysql for root password and other things:
   #+BEGIN_SRC sh
     mysql_secure_installation utility
   #+END_SRC

   - set "yes" for VALIDATE PASSWORD COMPONENT
   - set "MEDIUM" (i.e 1) for VALIDATION POLICY (i.e stregth of password)
    MEDIUM policy adds the conditions that passwords must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character. 
   - set your password
   - set "yes" for REMOVE ANONYMOUS USERS
   - set "yes" for DISALLOW ROOT LOGIN REMOTELY  
   - set "yes" for REMOVE TEST DATABASES
   - set "yes" for RELOAD PRIVILAGE TABLES
** create mysql user and database for drupal
*** connect to mysql by root (-p for prompt for password; use sudo otherwise gives "acces denied" even with correct password)
   #+BEGIN_SRC sh 
     sudo mysql -u root -p
   #+END_SRC
*** create datbase and user, and set privilages
    #+BEGIN_SRC sql
      CREATE DATABASE drupalodtutm DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;

      CREATE DATABASE drupalodtutm CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
      CREATE USER odtutm@localhost IDENTIFIED BY 'password';
      GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON drupal_example_site.* TO 'odtutm'@'localhost'
      this causes problems with drush sql-sync -> GRANT ALL PRIVILEGES ON drupalodtutm.* TO odtutm@localhost; 
      FLUSH PRIVILEGES;
      EXIT;
    #+END_SRC
*** to delete(drop) database and user:
    #+BEGIN_SRC sql
      DROP DATABASE drupalodtutm;
      DROP USER odtutm@localhost;
    #+END_SRC
** to start and restart mysql server:
   - sudo systemctl start mysql
   - sudo systemctl restart mysql
** to launch at reboot:
   - sudo systemctl enable mysql
** to see the status:
   - sudo systemctl status mysql
** to show databases and users
   - > show databases;
   - > select user from mysql.user;
* PHP
** Web server, php interpreter (php), and cgi (php-fpm)
   Our web server (nginx) serves static web pages (html).
   To utilize php, we need to install CGI (Common gateway interface), by which
   our web server talk to the php interpreter.
   So php-fpm (Fast cgi process manager) becomes the link between server and the interpreter
** install php:
   #+BEGIN_SRC sh
     sudo install php-fpm php-mysql
   #+END_SRC
** with other php modules:
   #+BEGIN_SRC sh
     sudo apt install php-cgi php-common php-fpm php-mysql php-gmp php-curl php-intl php-mbstring php-xmlrpc php-gd php-xml php-cli php-zip
   #+END_SRC
** php settings (php.ini):
   settings wiil be done in /etc/php/7.4/fpm/php.ini
   cgi.fix_pathinfo = 0
   
   also:
   #file_uploads = On
   #allow_url_fopen = On
   short_open_tag = On
   memory_limit = 256M
   cgi.fix_pathinfo = 0
   upload_max_filesize = 100M
   max_execution_time = 360
   date.timezone = Turkey //optional
   default_socket_timeout = 60 or 600 (default=60)
   max_input_time = 60 or 600 (default=60)
   
   short_open_tag = On
   memory_limit = 256M
   cgi.fix_pathinfo = 0
   upload_max_filesize = 100M
   max_execution_time = 360
   date.timezone = America/Chicago //optional
   
   on the dev site: display_errors = On
** restart php-fpm service:
   #+BEGIN_SRC sh
   sudo systemctl restart php7.4-fpm.service
   #+END_SRC
* Configure nginx for drupal usage
  copy below to configuration file (e.g /etc/nginx/sites-available/odtu-tm):
  ------
 #+BEGIN_SRC sh 
server {
    server_name _;
    root /var/www/odtu-tm; ## <-- Your only path reference.

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Very rarely should these ever be accessed outside of your lan
    location ~* \.(txt|log)$ {
        allow 192.168.0.0/16;
        deny all;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Block access to scripts in site files directory
    location ~ ^/sites/[^/]+/files/.*\.php$ {
        deny all;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ (^|/)\. {
        return 403;
    }

    location / {
        # try_files $uri @rewrite; # For Drupal <= 6
        try_files $uri /index.php?$query_string; # For Drupal >= 7
    }

    location @rewrite {
        #rewrite ^/(.*)$ /index.php?q=$1; # For Drupal <= 6
        rewrite ^ /index.php; # For Drupal >= 7
    }

    # Don't allow direct access to PHP files in the vendor directory.
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # Protect files and directories from prying eyes.
    location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|composer\.(lock|json)$|web\.config$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        deny all;
        return 404;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in
    # the middle, such as update.php/selection. The rule we use is strict,
    # and only allows this pattern with the update.php front controller.
    # This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If
    # you do not have any paths like that, then you might prefer to use a
    # laxer rule, such as:
    #   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL
    # pattern with front controllers other than update.php in a future
    # release.
    location ~ '\.php$|^/update.php' {
        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        # Ensure the php file exists. Mitigates CVE-2019-11043
        try_files $fastcgi_script_name =404;
        # Security note: If you're running a version of PHP older than the
        # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
        # See http://serverfault.com/q/627903/94922 for details.
        include fastcgi_params;
        # Block httpoxy attacks. See https://httpoxy.org/.
        fastcgi_param HTTP_PROXY "";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_intercept_errors on;
        # PHP 5 socket location.
        #fastcgi_pass unix:/var/run/php5-fpm.sock;
        # PHP 7 socket location.
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        try_files $uri @rewrite;
        expires max;
        log_not_found off;
    }

    # Fighting with Styles? This little gem is amazing.
    # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    # Handle private files through Drupal. Private file's path can come
    # with a language prefix.
    location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
        try_files $uri /index.php?$query_string;
    }

    # Enforce clean URLs
    # Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
    # Could be done with 301 for permanent or other redirect codes.
    if ($request_uri ~* "^(.*/)index\.php/(.*)") {
        return 307 $1$2;
    }
}
 #+END_SRC 
** to make things simpler:
   - take the above code and put it into /etc/nginx/apps/drupal file; then erase the necessary lines:
     
    server {
    server_name _;
    root /var/www/odtu-tm; ## <-- Your only path reference.

   - then, your odtu-tm can be:

    server {
    server_name localhost;
    root /var/www/odtu-tm;
    include apps/drupal;
    }

   - also you can add other servers, with different root(another drupal site maybe) in the same file:

    server {
    server_name foo.demo.d8;
    root /var/www/example-site;
    include apps/drupal;
    }

** to check syntax errors on nginx configuration file and to make it enabled and to restart services:
   #+BEGIN_SRC sh
     sudo nginx -t
     sudo ln -s /etc/nginx/sites-available/linuxscoop.cc /etc/nginx/sites-enabled/
     sudo systemctl restart nginx.service
     sudo systemctl restart php7.4-fpm.service
   #+END_SRC
** drupal files permissions (!!)
   - cd to  var/www/example-site/web/sites/default folder
   - also in the var/www/example-site create config/sync folders: "mkdir -p config/sync" (it should not be owned by root)
   - "chmod o-w files settings.php" (remove write permission from others for files folder and settings.php file)
   - "chgrp www-data files settings.php" (change group owner of files and settings.php to www-data which nginx uses)
   - "chmod g+s files/" (make groups stickych is www-data in files folder)
   - also in the var/www/example-site create config/sync folders: "mkdir -p config/sync" (it should not be owned by root)
   - if your site is in /var/www (where only root can access); then:
     1- > sudo gpasswd -a orcan www-data (add your user to www-data group)
     1- sudo chown -R www-data:www-data /var/www/example-site (make owner and group owner www-data)
     2- sudo chmod -R g+w /var/www/example-site (give write permissions to group owner, -R: recursively)
* SSL Certificate  
** install certbot
   #+BEGIN_SRC  sh
     sudo apt install certbot python-certbot-nginx
   #+END_SRC
** to get ssl certificate for https connections:
  certbot - for https
  python-certbot-nginx fot certbot to connect nginx
   #+BEGIN_SRC sh
      sudo certbot --nginx -d odtu-tm.com -d www.odtu-tm.com
   #+END_SRC
** auto renewal of certificates (from luke smith's web server video):
   you have to use:
   #+BEGIN_SRC sh
     crontab -e
   #+END_SRC
   to edit a new cron job
   and then add below line (for period of cron job):
   - 1 1 1 * * cerbot renew 
*** to see definitions of jobs:
    vim /etc/crontab
* Drupal without composer
** goto /tmp
** Download drupal:
   #+BEGIN_SRC sh
   mkdir drupal
   cd drupal
   curl -sSL https://www.drupal.org/download-latest/tar.gz | tar -xz --strip-components=1
   #+END_SRC
** copy all drupal files into server folder:
   #+BEGIN_SRC sh
     sudo cp -a drupal/. /var/www/odtu-tm
   #+END_SRC
** change ownership of all files in odtu-tm to www-data:
   #+BEGIN_SRC sh
     sudo chown -R www-data:www-data /var/www/odtu-tm/
   #+END_SRC
* Drupal insallation with composer
** First install composer globally:
   - execute commands from https://getcomposer.org/download/
** Install drupal from https://getcomposer.org/download/
   - to use composer give write permisson to others on /var/www: sudo chmod o+w /var/www
   - after installation with composer take it back with: sudo chmod o-w /var/www
   - before using composer make sure to install php modules (above PHP section)
   - install drupal with composer:
     composer create-project drupal-composer/drupal-project:8.x-dev some-dir --no-interactiony
* To start over drupal installation:
  - drop database drupalodtutm
  - cp /var/www/odtu-tm-d8/web/sites/default/default.settings.php /var/www/odtu-tm-d8/web/sites/default/settings.php
  - but you have to create database again and give privileges to the pdtutm user (see Mysql section)
* Git control on drupal site with composer
** Git remote settings
   - git remote add <desired name> git@gitlab.com:orcan/drupal-site.git 
   - to remove git remote
     git remote rm <remote name>
** in the base directory /var/www/odtu-tm-d8  
   - git init
   - git status
   - git add .
   - git commit -m "Intial commit" 
   - git push --set-upstream <name  of remote> <name of branch>
** Branching:
   - Creating a second brach is important (if you mess things up)
   - git branch test
   - git brach -l (list branches)
   - git checkout test (jump to test branch)
   - then add remote to push your test branch:
   - git remote add somefolder or server
   - suppose you create a project in gitlab (private one), get the ssh address of your project
   - git remote add somenameyouchoose sshaddressyoucopyfromgitlabpage
   - to list remotes: git remote -v
   - then add your ssh key (see SSH key generation section) 
   - git remote update
   - git push remotenameyouchoose test
** Merging branch with master
   - git checkout master
   - git merge test
** Git reset to gitlab original: 
   - git branch --set-upstream-to=test/test test  (--set-upstream-to=<remote-name>/<branch-name> <branch-name-on-this-machine>)
   - git pull <remote-name> <branch-name> --allow-unrelated-histories 
   - git add .
   - git commit -m "Resolved conflicts"
   - git reset --hard test/test
** Whole drupal installation with git, drupal-composer
   - create a folder say <example> in /var/www
   - give proper permissions to the folder, > sudo chown -R orcan:www-data .
   - get the drupal-composer project, > composer create-project drupal-composer/drupal-project:8.x-dev some-dir --no-interaction
   - git add .
   - > git init
   - > git commit -m "Initial commit"
   - > git branch -m test (This renames the branch from master to test once it's created) 
   - > git remote add gitlab git@gitlab.com:orcan/drupal-site.git
   - > git pull gitlab test (will fail, due to unrelated histories)
   - > git pull (will give a message for setting upstream for remote)
   - > git branch --set-upstream-to=gitlab/test test  (--set-upstream-to=<remote-name>/<branch-name> <branch-name-on-this-machine>)
   - > git reset --hard gitlab/test
   - > git pull
   - > composer install
   
* SSH key generation
   - to list all the keys generated: ls ~/.ssh
   - to add a new key: ssh-keygen -t rsa -b 4096 -C "your_email@example.com"; see https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
   - to see the background ssh-agent PID: echo $SSH_AGENT_PID
   - if no ssh-agent is running in the background: eval $(ssh-agent -s)
   - to add your ssh key to ssh-agent: ssh-add ~/.ssh/id_rsa.pub or ~/.ssh/yourkeyfilename
   - to copy ssh public key to clipboard: xclip -sel clip < ~/.ssh/id_rsa.pub
   - add your public key to gitlab or github
* Using sftp and rclone with server
** Using just command-line stfp:
   #+BEGIN_SRC sh
     sftp -i ~/Downloads/LightsailDefaultKey-eu-central-1.pem admin@odtu-tm.com
   #+END_SRC
** Configuring rclone:
   using https://rclone.org/sftp/ configure a remote for rsync with a PEM-encoded private key file and a port (22)
** Upgrading rclone:
   #+BEGIN_SRC sh
     sudo curl https://rclone.org/install.sh | sudo bash 
   #+END_SRC

* Using drush to export / import configuration of drupal site (cloning a site from gitlab):
** Procedure:
  - you need to install drush first: in the base folder (www/odtu-tm) : composer require drush/drush
  - this command puts drush executable in the base : /vendor/bin/drush
  - you can check version by: ./vendor/bin/drush --version
  - Rather than have to type ./vendor/bin/drush or the relative path to the executable in order to execute Drush commands, install the Drush Launcher. That is a small program which listens on your $PATH and passes control to a project-specific Drush installation in the /vendor directory of the project associated with your current working directory. (The directory you're running drush within is somewhere in your project's directory hierarchy.)
  - see https://drupalize.me/tutorial/install-drush-using-composer?p=1156
  - somewhere in linux home:
    wget -O drush.phar https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
    chmod +x drush.phar
    sudo mv drush.phar /usr/local/bin/drush 
    to update: drush self-update (you should be in root, e.g /var/www/example-site)
  - Similarly, "drupal console" launcher can be used for dupal launcer comman which is "drupal":
    curl https://drupalconsole.com/installer -L -o drupal.phar
    mv drupal.phar /usr/local/bin/drupal
    chmod +x /usr/local/bin/drupal
    to update drupal console : > drupal self-update (you should be on the root base folder. e.g /var/www/example-site ) 
  - to export config from one site (odtu-tm-d8) > in the web folder: (sudo) drush cex (configurations will be saved in the ../config/)
  - to do that change the settings.php in (/web/sites/default) as -> $settings['config_sync_directory'] = '../config/sync';
  - Now you can see config folder with git status
  - git push
  - go to other site (production) folder and git clone first site (odtu-tm)
    >git clone odtu-tm production (this clones and create production)
    or > sudo git clone git@gitlab.com:orcan/drupal-site.git foldername (do this in the home/videos folder bec. git clone wont work in /var/www/)
  - you need to change permissions to settings.php, files folder in the web/sites/default folder
  - also you need to set  
    1- $settings['trusted_host_patterns'] = array(
  '^www\.linuxscoop\.cc$',
  '^linuxscoop\.cc$',
  );
    2- $settings['file_private_path'] = '../tm-private-files';
    3- $settings['config_sync_directory'] = '../config/sync' 
    4- $settings['trusted_host_patterns'] = array('^www\.odtu-tm\.org$','^odtu-tm\.org$');
    5- for local  $settings['trusted_host_patterns'] = array('^demo\.example$'); 
  - to get the dependencies and modules : > composer install (in the production site)
  - then drush cim (but this will give uuid error)
  - To solve this:
  - From base : > vim config/sync/system.site.yaml
  - get the uuid with from the config/sync/system.site.yaml from the production site config (this is the uuid of odtu-tm):
    and put it in the production site: > drush cset system.site uuid "newvaluofuuid" (so it will ignore its own uuid)
  - the drush cim again
  - then it gives shortcut links error
  - To solve that: then remove the shortcuts menu (press shortcuts in the drupal page and then edit shortcuts and delete them)
  - the drush cim again
  - try changing something in the odtu-tm
    ex:
  - use composer for drupal packages: >composer require drupal/admin_toolbar (in the base level directory /www/odtu-tm)
  - this command changes composer.json and composer.lock files
  - git add, commit and push those into brach
  - int the production git pull and then > composer install (to load the composer.lock who has the new module info)
  - in the odtu-tm, drush en admin_toolbar(this should be done in the web folder (drupal root)), in order not to go bakc and forth to web and up: in the base : > drush use /var/www/odtu-tm/web#default
  - to add this config drush cex (this command will change the config/sync in the base)
  - git push in odtu-tm and git pull, drush cim in production site
** In Summary:
   - First time you create the site (use composer install)
   - if you install a module (you do it by composer require and it changes composer.lock), after commit, push, pull you have to (composer install --no-dev, which implements composer.lock)
     The --no-dev switch skips the installation of packages not intended for use on production sites
     see https://stackoverflow.com/questions/33052195/what-are-the-differences-between-composer-update-and-composer-install
   - if you enable a module (which is a configuration change), before commit,push pull: drush cex ;after commit, push, pull you have to drush cim
   - composer update is mostly used in the 'development phase', to upgrade our project packages according to what we have specified in the composer.json file,
   - composer install is primarily used in the 'deploying phase' to install our application on a production server or on a testing environment, using the same dependencies stored in the composer.lock file created by composer update.

* Put trusted sites (if drupal complains about that!)
  $settings['trusted_host_patterns] = array(
  '^www\.linuxscoop\.cc$',
  '^linuxscoop\.cc$',
  );'
  
* Drupal Modules
** List updatable packages,
   - > composer show -l
   - or > composer outadted
** For only drupal 
   - > composer outdated "drupal/*"
** List security updates
   - > drush pm:security
** Drupal fora given project
   - > composer update drupal/modulename --with-dependencies
   Finally, run any database updates, rebuild the cache and export the potentially changed configurations, reviewing the changes via --diff:
   
   drush updatedb
   drush cache:rebuild
   drush config:export --diff
** How to update installed modules with composer
   - > composer update drupal/<modulename>
** Speed up drupal local host
   - in /etc/php/7.4/fpm/php.ini
   - realpath_cache_size = 16M
   - see: https://www.drupal.org/node/961012
** Token
** Admin Toolbar (admin_toolbar)
** Webform (with Webform Access, Webform UI, Webform Node, and Web Form Attachment submodule)
   - You probably need to > drush webform:repair (if add element does not appear)
   - /fillpdf?fid=1&download=1&entity_type=webform_submission&entity_id=[webform_submission:sid] (for url to fill pdf works with webform)
** Fillpdf:
   - You have to install pdftk (> sudo apt install pdftk)
   - URL for fillpdf: /fillpdf?fid=1&entity_type=webform_submission&entity_id=[webform_submission:sid]
** Backup and Migrate Module
** Language Module, Content Translation adn Interface Translation modules
   - Never change the default language, otherwise things will break!
** SMTP
   - > composer require drupal/smtp
   - smtp.metu.edu.tr
   - port 587
   - Protocol: Use TLS
   - koorcan and password
   - send from should be koorcan@metu.edu.tr
** Private file system settings:
   - see https://www.drupal.org/docs/8/modules/skilling/installation/set-up-a-private-file-path
   - > mkdir tm-private-files (under var/www/example-site)
   - > sudo chown www-data:/www-data var/www/example-site/tm-private-files
   - you should add orcan to www-data group (> usermod -a -G orcan www-data)
   - inside web/sites/default
   - > sudo chmod u+w settings.php 
   - insert:
     $settings['file_private_path'] = '/var/www/example-site/tm-private-files';
   - also insert:
     $settings['trusted_host_patterns'] = [
       '^demo\.example$',     #yourhostname
     ];

** Ultimate Cron (ultimate_cron)
   - You have to edit cron by: > sudo crontab -e
   - * * * * *      /usr/bin/wget -O - -q -t 1 http://demo.example/cron/bA55m1aX15KJu8dMnefJr-QGB2_INaI3Pwe_YBIpxgRNz2ymR_iZP24a0pRe9LMZXOOg_3AEnw
** Webform views integration module
   - > composer require drupal/webform_views
** Maintenance Mode Set and Unset:
   to set:
   - > drush sset system.maintenance_mode 0
   - > druch cr
   to unset:
   - > drush sset system.maintenance_mode 1
   - > druch cr
   - to login in maintenance mode https://odtu-tm.org/user/login
* Using drush (dump-sql rsync sql-sync) to get contents to/from production site
** Add your ssh public key to remote servers authorized keys
   - > cat ~/.ssh/id_rsa.pub 
   - copy the result
   - and paste it in to the server's ~/.ssh/authorized_keys
   - This way you you are not supposed to: ssh -i ~/Downloads/Light... admin@odtu-tm.org , with the pem file from lightsail site
** Configure self.site.yml file for site aliases:
   - vim /var/www/example-site/drush/sites/self.site.yml 
   - prod:
       host: odtu-tm.org
       user: admin
       root: /var/www/odtu-tm-org
       uri: http://www.odtu-tm-org
   - There should be a sigle space after semicolon(: )  
   - This conf uses to ssh to your server with drush commands
   - Now you have @self (which your local site:http://demo.example) and @self.prod (which is your server with above conf)
** Drush commands (https://drushcommands.com/drush-9x/cache/cache:clear/):
   - > drush @self status or > drush status (to see your local site info, with db info)
   - > drush @self.prod status (to see your server site info)
   - > drush @self sql-dump --result-file=/home/orcan/Videos/odtu-local-dump.sql (to backup your database)
   - > drush sa (site aliases, to see the sites aliases)  
   - > drush (show available commands) 
   - > drush sql-sync @self.prod @self => (sql-sync from-dest to-dest) (get database from server to local)
   - Risk! Dont do this the other way around (from local to server, you might mess the production site)
   - This command craetes a sql file in /tmp folder of your target machine
   - > drush @self cr or > drush cr (cache:rebuild, clears all caches of drupal)
   - manually installing database from dump file: sudo mysql -uodtutm -p'username' drupalodtutm < /tmp/dump_file_20200916_210737.sql 
   - if above gives error: sed -i /tmp/dump_file.sql -e 's/utf8mb4_0900_ai_ci/utf8mb4_unicode_ci/g'
* To remove mysql (safely) and install mariadb:
  - sudo apt purge mysql-server
  - sudo apt autoremove
  - sudo rm -rf /etc/mysql /var/lib/mysql
  - sudo apt-get dist-upgrade
  - sudo apt autoremove
  - sudo apt install mariadb-server mariadb-client
** Also if you installed mysql earlier:
   - sudo 
   - echo "/usr/sbin/mysqld { }" > /etc/apparmor.d/usr.sbin.mysqld
   - apparmor_parser -v -R /etc/apparmor.d/usr.sbin.mysqld
   - systemctl restart mariadb

    Background:
  - If you previously had MySQL installed, it activated an AppArmor profile which is incompatible with MariaDB. apt-get remove --purge only removes the profile, but does not deactivate/unload it. Only manually unloading it lets MariaDB work unhindered by AppArmor.
* Securing file permissions and ownership:
** See https://www.drupal.org/node/244924#linuxservers 
** In the base of drupal (/var/www/example-site/):
   - sudo chown -R orcan:www-data .
   - sudo find . -type d -exec chmod u=rwx,g=rwx,o=rx '{}' \;
   - sudo find . -type f -exec chmod u=rw,g=rw,o=r '{}' \;
** In the drupal root (/var/www/example-site/web):
   - sudo find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;
   - sudo find . -type f -exec chmod u=rw,g=r,o= '{}' \;
     OR:
   - sudo find . -type f -exec chmod u=rw,g=rw,o= '{}' \; 
   and > sudo find . -type f -exec chmod u=rw,g=r,o= '{}' \; in /web/sites/default folder (to make settings.php non-reachable)
** In the sites directory (var/www/example-site/web/sites/):
   - sudo find . -type d -name files -exec chmod ug=rwx,o= '{}' \;
** For the /sites/default or other existing sites (run command from web/sites directory):
   - for d in ./*/files
      do
         sudo find $d -type d -exec chmod ug=rwx,o=rx '{}' \;
         sudo find $d -type f -exec chmod ug=rw,o=r '{}' \;
      done 

* Deploying local site to remote site:
** On the local prepare:
   - > drush sset system.maintenance_mode 1
   - composer update
   - drush updatedb
   - drush cr
   - drush cex
   - git add, commit, push 
** On the remote:
   - drush state-set system.maintenance_mode 1
   - drush cr
   - git pull
   - composer install
   - drush cr
   - on the local : > drush sql-sync  @self @self.prod
   - drush updatedb
   - drush cim 
   - drush cr
** On the https://drupal.stackexchange.com/questions/254407/order-of-drush-commands-for-automated-deployment
   NOTE: Database updates always come before configuration import!

   drush state:set system.maintenance_mode 1
   drush cache:rebuild
   git pull
   composer install --no-dev
   drush cache:rebuild
   drush deploy
   drush state:set system.maintenance_mode 0
   drush cache:rebuild
