#TITLE = Web server project
* SSH settings and Web server, 'ngynx'
** set sshd_config:
   in the /etc/ssh/shhd_config file:
   do not set anything (port should be: 22)
** to ssh to server with ip:
   
   #+BEGIN_SRC sh
     ssh -i ~/Downloads/Light... admin@staticip
   #+END_SRC
** install nginx
  nginx - is the server application
  #+BEGIN_SRC sh 
    install ngynx 
  #+END_SRC
** to restart nginx: 
   #+BEGIN_SRC sh
     systemctl reload nginx
   #+END_SRC
** to restart ssh service: 
   #+BEGIN_SRC sh
     systemctl restart ssh.service
   #+END_SRC
** firewall (ufw) - seems not enough alone
   #+BEGIN_SRC sh
     sudo apt install ufw
     sudo ufw enable
     sudo ufw app list
     sudo ufw allow 22/tcp comment 'Open port ssh tcp port 22'
     sudo ufw allow 80
     sudo ufw allow 443
     sudo ufw allow 'Nginx Full'
     sudo ufw status
   #+END_SRC
** also firewall on aws lightsail:
   - in "Networking"->"Firewall"->"Add Rule"-> HTTPS 443
** set nginx.conf in /var/nginx (for timeout erros)
   #+BEGIN_SRC sh
     sudo vim /etc/nginx/nginx.conf 
   #+END_SRC
   then:
   http {
    ...
    fastcgi_read_timeout 600s;
    ...
    } 
* Database, 'mysql'
** install mysql-server:
   #+BEGIN_SRC sh
     sudo apt install mysql-server
   #+END_SRC
** to configure mysql for root password and other things:
   #+BEGIN_SRC sh
     mysql_secure_installation utility
   #+END_SRC

   - set "yes" for VALIDATE PASSWORD COMPONENT
   - set "MEDIUM" (i.e 1) for VALIDATION POLICY (i.e stregth of password)
    MEDIUM policy adds the conditions that passwords must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character. 
   - set your password
   - set "yes" for REMOVE ANONYMOUS USERS
   - set "yes" for DISALLOW ROOT LOGIN REMOTELY  
   - set "yes" for REMOVE TEST DATABASES
   - set "yes" for RELOAD PRIVILAGE TABLES
** create mysql user and database for drupal
*** connect to mysql by root (-p for prompt for password; use sudo otherwise gives "acces denied" even with correct password)
   #+BEGIN_SRC sh 
     sudo mysql -u root -p
   #+END_SRC
*** create datbase and user, and set privilages
    #+BEGIN_SRC sql
      CREATE DATABASE drupalodtutm CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
      CREATE USER odtutm@localhost IDENTIFIED BY 'password';
      GRANT ALL PRIVILEGES ON drupalodtutm.* TO odtutm@localhost; 
      FLUSH PRIVILEGES;
      EXIT;
    #+END_SRC
*** to delete(drop) database and user:
    #+BEGIN_SRC sql
      DROP DATABASE drupalodtutm;
      DROP USER odtutm@localhost;
    #+END_SRC
** to start and restart mysql server:
   - sudo systemctl start mysql
   - sudo systemctl restart mysql
** to launch at reboot:
   - sudo systemctl enable mysql
** to see the status:
   - sudo systemctl status mysql
* PHP
** Web server, php interpreter (php), and cgi (php-fpm)
   Our web server (nginx) serves static web pages (html).
   To utilize php, we need to install CGI (Common gateway interface), by which
   our web server talk to the php interpreter.
   So php-fpm (Fast cgi process manager) becomes the link between server and the interpreter
** install php:
   #+BEGIN_SRC sh
     sudo install php-fpm php-mysql
   #+END_SRC
** with other php modules:
   #+BEGIN_SRC sh
     sudo apt install php-cgi php-common php-fpm php-mysql php-gmp php-curl php-intl php-mbstring php-xmlrpc php-gd php-xml php-cli php-zip
   #+END_SRC
** php settings (php.ini):
   settings wiil be done in /etc/php/7.4/fpm/php.ini
   cgi.fix_pathinfo = 0
   
   also:
   #file_uploads = On
   #allow_url_fopen = On
   short_open_tag = On
   memory_limit = 256M
   cgi.fix_pathinfo = 0
   upload_max_filesize = 100M
   max_execution_time = 600 or 60
   date.timezone = Turkey //optional
   default_socket_timeout = 60 or 600
   max_input_time = 60 or 600
** restart php-fpm service:
   #+BEGIN_SRC sh
   sudo systemctl restart php7.4-fpm.service
   #+END_SRC
* Configure nginx for drupal usage
  copy below to configuration file (e.g /etc/nginx/sites-available/odtu-tm):
  ------
 #+BEGIN_SRC sh 
server {
    server_name _;
    root /var/www/odtu-tm; ## <-- Your only path reference.

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Very rarely should these ever be accessed outside of your lan
    location ~* \.(txt|log)$ {
        allow 192.168.0.0/16;
        deny all;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    location ~ ^/sites/.*/private/ {
        return 403;
    }

    # Block access to scripts in site files directory
    location ~ ^/sites/[^/]+/files/.*\.php$ {
        deny all;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ (^|/)\. {
        return 403;
    }

    location / {
        # try_files $uri @rewrite; # For Drupal <= 6
        try_files $uri /index.php?$query_string; # For Drupal >= 7
    }

    location @rewrite {
        #rewrite ^/(.*)$ /index.php?q=$1; # For Drupal <= 6
        rewrite ^ /index.php; # For Drupal >= 7
    }

    # Don't allow direct access to PHP files in the vendor directory.
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # Protect files and directories from prying eyes.
    location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|composer\.(lock|json)$|web\.config$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        deny all;
        return 404;
    }

    # In Drupal 8, we must also match new paths where the '.php' appears in
    # the middle, such as update.php/selection. The rule we use is strict,
    # and only allows this pattern with the update.php front controller.
    # This allows legacy path aliases in the form of
    # blog/index.php/legacy-path to continue to route to Drupal nodes. If
    # you do not have any paths like that, then you might prefer to use a
    # laxer rule, such as:
    #   location ~ \.php(/|$) {
    # The laxer rule will continue to work if Drupal uses this new URL
    # pattern with front controllers other than update.php in a future
    # release.
    location ~ '\.php$|^/update.php' {
        fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
        # Ensure the php file exists. Mitigates CVE-2019-11043
        try_files $fastcgi_script_name =404;
        # Security note: If you're running a version of PHP older than the
        # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
        # See http://serverfault.com/q/627903/94922 for details.
        include fastcgi_params;
        # Block httpoxy attacks. See https://httpoxy.org/.
        fastcgi_param HTTP_PROXY "";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_intercept_errors on;
        # PHP 5 socket location.
        #fastcgi_pass unix:/var/run/php5-fpm.sock;
        # PHP 7 socket location.
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        try_files $uri @rewrite;
        expires max;
        log_not_found off;
    }

    # Fighting with Styles? This little gem is amazing.
    # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
    location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
        try_files $uri @rewrite;
    }

    # Handle private files through Drupal. Private file's path can come
    # with a language prefix.
    location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
        try_files $uri /index.php?$query_string;
    }

    # Enforce clean URLs
    # Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
    # Could be done with 301 for permanent or other redirect codes.
    if ($request_uri ~* "^(.*/)index\.php/(.*)") {
        return 307 $1$2;
    }
}
 #+END_SRC 
** to check syntax errors on nginx configuration file and to make it enabled and to restart services:
   #+BEGIN_SRC sh
     sudo nginx -t
     sudo ln -s /etc/nginx/sites-available/linuxscoop.cc /etc/nginx/sites-enabled/
     sudo systemctl restart nginx.service
     sudo systemctl restart php7.4-fpm.service
   #+END_SRC
* SSL Certificate  
** install certbot
   #+BEGIN_SRC  sh
     sudo apt install certbot python-certbot-nginx
   #+END_SRC
** to get ssl certificate for https connections:
  certbot - for https
  python-certbot-nginx fot certbot to connect nginx
   #+BEGIN_SRC sh
      sudo certbot --nginx -d odtu-tm.com -d www.odtu-tm.com
   #+END_SRC
** auto renewal of certificates (from luke smith's web server video):
   you have to use:
   #+BEGIN_SRC sh
     crontab -e
   #+END_SRC
   to edit a new cron job
   and then add below line (for period of cron job):
   - 1 1 1 * * cerbot renew 
*** to see definitions of jobs:
    vim /etc/crontab
* Drupal 
** goto /tmp
** Download drupal:
   #+BEGIN_SRC sh
   mkdir drupal
   cd drupal
   curl -sSL https://www.drupal.org/download-latest/tar.gz | tar -xz --strip-components=1
   #+END_SRC
** copy all drupal files into server folder:
   #+BEGIN_SRC sh
     sudo cp -a drupal/. /var/www/odtu-tm
   #+END_SRC
** change ownership of all files in odtu-tm to www-data:
   #+BEGIN_SRC sh
     sudo chown -R www-data:www-data /var/www/odtu-tm/
   #+END_SRC
* Using sftp and rclone with server
** Using just command-line stfp:
   #+BEGIN_SRC sh
     sftp -i ~/Downloads/LightsailDefaultKey-eu-central-1.pem admin@odtu-tm.com
   #+END_SRC
** Configuring rclone:
   using https://rclone.org/sftp/ configure a remote for rsync with a PEM-encoded private key file and a port (22)
** Upgrading rclone:
   #+BEGIN_SRC sh
     sudo curl https://rclone.org/install.sh | sudo bash 
   #+END_SRC
