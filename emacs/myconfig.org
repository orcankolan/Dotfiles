
* Built-in modes and variables
** Startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Main window title
   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format "Orcans emacs")
   #+END_SRC
** Other modes
*** Tool bar
    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
    #+END_SRC
*** Scroll bar
    #+BEGIN_SRC emacs-lisp
      (scroll-bar-mode -1)    
    #+END_SRC
*** Column number
    #+BEGIN_SRC emacs-lisp
      (column-number-mode)    
    #+END_SRC
*** Line numbers
    #+BEGIN_SRC emacs-lisp
      (global-linum-mode t)
    #+END_SRC
*** Parenthesis highlighting
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode)                
    #+END_SRC
*** Winner mode
    When activated, it allows you to “undo” (and “redo”) changes in
    the window configuration with the key commands ‘C-c left’ and ‘C-c
    right’
    #+BEGIN_SRC emacs-lisp
      (winner-mode t)    
    #+END_SRC
** Revert buffer key-binding
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
* Try package
  Used to try packages on emacs without permenantly installing them
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)  
  #+END_SRC
* Which-key package
  Used with C-x command. Helps finding some useful commands from mini-buffer
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode)) ; :init sets things before, :config sets
                                ; things after it loads package.
  #+END_SRC
* Org-mode stuff
  Org is included as built-in package in Emacs. To re-install org-mode "use package-install R org"
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
* Buffers and Buffer Listing
  List buffer in an other window
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer-other-window)  
  #+END_SRC
* Window State Managment and Jump windows
  Using ace-window package to jump between windows
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0 :foreground "deep sky blue")))))
        ))
  #+END_SRC
* Swiper and searching
** Counsel package
   This package is necessary for the swiper package
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t)
   #+END_SRC
** Ivy package
   Switching buffers with the fancy ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
     )   
   #+END_SRC
** Swiper package
   Using swiper for search and using counsel for find-file
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind (("C-s" . swiper)
              ("C-r" . swiper)
              ("C-c C-r" . ivy-resume)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file))
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq ivy-display-style 'fancy)
         (setq enable-recursive-minibuffers t)
         (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
       )
     )   
   #+END_SRC
** Avy package
   Used to jump to chars, words, or lines in the screen easily
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("M-s" . avy-goto-char)
              ("M-g w" . avy-goto-word-1)
              ("M-g f" . avy-goto-line))
       )   
   #+END_SRC
** Auto-complete package
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
         (ac-config-default)
         (global-auto-complete-mode t)
         ))
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package tangotango-theme
      :ensure t
      :config
      (load-theme 'tangotango t))  
  #+END_SRC
* Powerline
** Where to find Airline themes
- to use airline theme (see https://github.com/AnthonyDiGirolamo/airline-themes)
- to see airline theme (https://github.com/vim-airline/vim-airline/wiki/Screenshots)

  #+BEGIN_SRC emacs-lisp
    (use-package powerline
      :ensure t)  

    ;; to use smart mode line and its powerline theme

    ;; (use-package smart-mode-line
    ;;   :ensure t)

    ;; (use-package smart-mode-line-powerline-theme
    ;;    :ensure t
    ;;    :after powerline
    ;;    :after smart-mode-line
    ;;    :config
    ;;     (setq sml/no-confirm-load-theme t)
    ;;     (sml/setup)
    ;;     (sml/apply-theme 'powerline)
    ;; )

    (use-package airline-themes
      :ensure t
      :config
      (load-theme 'airline-hybridline :no-confirm)
    )
  #+END_SRC

  #+RESULTS:
  : t

* UndoTree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init (global-undo-tree-mode))  
  #+END_SRC
* Auctex
  Auctex is used in emacs to edit latex files
  #+BEGIN_SRC emacs-lisp
    (use-package tex-site
      :ensure auctex
      :mode ("\\.tex\\'" . latex-mode)
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (add-hook 'LaTeX-mode-hook
                (lambda ()
                  (rainbow-delimiters-mode)
                  (company-mode)
                  (smartparens-mode)
                  (turn-on-reftex)
                  (setq reftex-plug-into-AUCTeX t)
                  (reftex-isearch-minor-mode)
                  (setq TeX-PDF-mode t)
                  (setq TeX-source-correlate-method 'synctex)
                  (setq TeX-source-correlate-start-server t)
                  ))

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

    ;; to use pdfview with auctex
    (add-hook 'LaTeX-mode-hook 'pdf-tools-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

    ;; to use pdfview with auctex
    (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
           TeX-source-correlate-start-server t)
    (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
    (add-hook 'pdf-view-mode-hook 'TeX-source-correlate-mode)
    )
  #+END_SRC

** Reftex
   Helps inserting labels, references and citations
   #+BEGIN_SRC emacs-lisp
     (use-package reftex
       :ensure t
       :defer t
       :config
       (setq reftex-cite-prompt-optional-args t)); Prompt for empty optional arguments in cite
        
   #+END_SRC

** Pdf-tools
   A package for viewing and interacting with pdf within emacs
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :ensure t
       :mode ("\\.pdf\\'" . pdf-tools-install)
       :bind ("C-c C-g" . pdf-sync-forward-search)
       :defer t
       :config
       (setq mouse-wheel-follow-mouse t)
       (setq pdf-view-resize-factor 1.10))
        
   #+END_SRC
* Evil-Mode
  Evil-Mode is the extensible VI layer for emacs.(M-x evil-mode for activation)
  #+BEGIN_SRC emacs-lisp
    (use-package evil
       :ensure t
       :config (evil-mode 1))
    (evil-set-initial-state 'pdf-view-mode 'emacs)
    (add-hook 'pdf-view-mode-hook
      (lambda ()
        (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
  #+END_SRC
* Cheatsheet
  To create your own cheat-sheet
  #+BEGIN_SRC emacs-lisp
    (use-package cheatsheet
      :ensure t)
  #+END_SRC
** Adding cheats
   Add cheats as below in this area
   #+BEGIN_SRC emacs-lisp
     (cheatsheet-add :group 'Common :key "C-x C-c" :description "leave Emacs.")
     (cheatsheet-add :group 'Common :key "C-S _ & C-x u" :description "undo & undo tree (q for quit undotree)")
     (cheatsheet-add :group 'OrgMode :key "C-c '" :description "goto(quit) edit mode in source")
     (cheatsheet-add :group 'OrgMode :key "M-;" :description "uncomment or comment region in edit mode")
     (cheatsheet-add :group 'OrgMode :key "<s TAB" :description "start a source block")
     (cheatsheet-add :group 'OrgMode :key "C-c C-e" :description "open org export menu page (html, latex etc.")
     (cheatsheet-add :group 'Cheatsheet :key "C-q" :description "quit from cheat sheet")
     (cheatsheet-add :group 'Common :key "C-x C-f" :description "open file")
     (cheatsheet-add :group 'Common :key "M-x evil-mode" :description "vim mode")
     (cheatsheet-add :group 'Common :key "M-x global-auto-complete-mode" :description "enable/disable autocomplete")
     (cheatsheet-add :group 'Common :key "C-x b" :description "switch buffer")
     (cheatsheet-add :group 'Common :key "C-x 4 b" :description "open buffer in other window")
     (cheatsheet-add :group 'Common :key "C-x k" :description "kill buffer")
     (cheatsheet-add :group 'Common :key "C-x C-b" :description "list buffers")
     (cheatsheet-add :group 'Common :key "C-c left" :description "undo window layout")
     (cheatsheet-add :group 'Common :key "M-g g" :description "goto line number")
     (cheatsheet-add :group 'Common :key "M-g w" :description "goto word")
     (cheatsheet-add :group 'Common :key "M-g f" :description "goto line")
     (cheatsheet-add :group 'Common :key "M-s" :description "goto character")
     (cheatsheet-add :group 'Common :key "C-z" :description "makes emacs sleep (fg from terminal to recover)")
     (cheatsheet-add :group 'Common :key "C-h k key" :description "description for the inserted key")
     (cheatsheet-add :group 'Common :key "C-h c key" :description "description for the inserted key in the echo area")
     (cheatsheet-add :group 'Common :key "M-$" :description "spell check for the current word")
     (cheatsheet-add :group 'VIM :key "d i (" :description "delete inside parenthesis (also c for change)")
     (cheatsheet-add :group 'Auctex :key "C-c _" :description "ask for the master tex file for compilitaion")
     (cheatsheet-add :group 'Auctex :key "M-x normal-mode" :description "after you saved your tex file with new master use this before compilation with Latex (C-c C-c)")
     (cheatsheet-add :group 'Auctex :key "C-c C-c" :description "To compile with Latex")
     (cheatsheet-add :group 'Auctex :key "C-c C-v" :description "To view as pdf. (When the master tex file opened use this for the first view. Then use q to quit view. Then use the C-c C-v again for the tex-source-correlate-mode to work")
   #+END_SRC

* Spelling
  You must install hunspell with apt-get. Dictionaries (such as tr_TR.aff and tr_TR.dic)
should be copied into /usr/share/hunspell. 
- By using "M-x ispell-change-dictionary" dictionaries can be
changed and also be viewed.
#+BEGIN_SRC emacs-lisp
  (cond
   ;; try hunspell at first
    ;; if hunspell does NOT exist, use aspell
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-dictionary "tr_TR")
    )

    ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
#+END_SRC

- Use 'M-x flyspell-buffer' to underline unknown words
- Use 'M-x flyspell-mode' to toggle flyspell
- Added words with ispell are located in the ~/.hunspell_{dictionary name}

